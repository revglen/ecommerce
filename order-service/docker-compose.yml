version: '3.8'

services:

  # PostgreSQL Database Service
  postgres:
    image: postgres:13-alpine
    container_name: order-db
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: order_user
      POSTGRES_PASSWORD: order_password
    volumes:
      - ./init-order-db.sql:/docker-entrypoint-initdb.d/init-order-db.sql
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - order-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U order_user -d order_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # consul-agent:
  #   image: hashicorp/consul:1.20
  #   command: "agent -node=order-1 -retry-join=${CONSUL_HOST} -data-dir=/consul/data -server=false -bind=0.0.0.0 -client=0.0.0.0"
  #   volumes:
  #     - ./consul-data:/consul/data    
  #   networks:
  #     - order-network
   
  # order Service
  order-service:    
    build:
      context: .
      dockerfile: Dockerfile
    image: order-service
    container_name: order-service
    depends_on:
      # consul-agent: 
      #   condition: service_started
      postgres:
        condition: service_healthy
    environment:
      DB_HOST: ${EXTERNAL_HOST_IP}  # Uses the service name as hostname
      DB_PORT: 5432
      DB_NAME: order_db
      DB_USER: order_user
      DB_PASSWORD: order_password
      SECRET_KEY: Something
      API_KEY: API_KEY
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      CORS_ORIGINS: http://localhost:3000,http://127.0.0.1:3000
      PROMETHEUS_ENABLED: true
      LOG_LEVEL: INFO
      CONSUL_HOST: ${CONSUL_HOST}
      CONSUL_PORT: ${CONSUL_PORT}
      SERVICE_NAME: order-service
      SERVICE_PORT: 8001
      EXTERNAL_HOST_IP: ${EXTERNAL_HOST_IP}
      
    ports:
      - "8001:8001"
    networks:
      - order-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/v1/orders/health/ready/"]
      interval: 30s
      timeout: 10s
      retries: 3
   
# Define networks and volumes
networks:
  order-network:
    driver: bridge

volumes:
  pgdata:
